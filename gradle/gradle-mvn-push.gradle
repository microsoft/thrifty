/*
 * Copyright 2015-2018 Microsoft Corporation
 * Copyright 2015 KeepSafe Software
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven'
apply plugin: 'signing'

def getRepositoryUsername() {
    return hasProperty('THRIFTY_SONATYPE_USERNAME') ? THRIFTY_SONATYPE_USERNAME : System.env.THRIFTY_SONATYPE_USERNAME
}

def getRepositoryPassword() {
    return hasProperty('THRIFTY_SONATYPE_PASSWORD') ? THRIFTY_SONATYPE_PASSWORD : System.env.THRIFTY_SONATYPE_PASSWORD
}

afterEvaluate { project ->
    def isRelease = project.version.contains("SNAPSHOT") == false

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = project.group
                pom.artifactId = project.name
                pom.version = project.version

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }

                pom.project {
                    name project.name
                    packaging 'jar'
                    description project.description
                    url POM_URL
                    inceptionYear '2015'

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name POM_LICENSE_NAME
                            url POM_LICENSE_URL
                            distribution "repo"
                        }
                    }

                    developers {
                        developer {
                            id "benjamin-bader"
                            name "Benjamin Bader"
                        }
                    }
                }
            }
        }
    }

    signing {
        required { isRelease && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    if (project.plugins.hasPlugin('org.jetbrains.kotlin') || project.plugins.hasPlugin('kotlin')) {
        apply plugin: 'org.jetbrains.dokka'

        dokka {
            includes = ['Module.md']

            linkMapping {
                dir = project.file("src/main/kotlin")
                url = "https://github.com/Microsoft/thrifty/tree/master/${project.name}/src/main/kotlin"
                suffix = "#L"
            }

            jdkVersion = 8

            outputFormat = 'html'
            outputDirectory = "${project.buildDir}/docs/kdoc"
        }
    }

    task javadocJar(type: Jar) {
        if (project.plugins.hasPlugin('org.jetbrains.dokka')) {
            dependsOn dokka
            from dokka.outputDirectory
        } else {
            dependsOn javadoc
            from 'build/docs/javadoc'
        }

        classifier = 'javadoc'
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }

    artifacts {
        if (project.getPlugins().hasPlugin('com.github.johnrengelman.shadow')) {
            archives shadowJar
        } else {
            archives jar
        }
        archives javadocJar
        archives sourcesJar
    }
}
