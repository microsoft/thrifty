/*
 * Thrifty
 *
 * Copyright (c) Microsoft Corporation
 *
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * THIS CODE IS PROVIDED ON AN  *AS IS* BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING
 * WITHOUT LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE,
 * FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
 *
 * See the Apache Version 2.0 License for specific language governing permissions and limitations under the License.
 */

plugins {
    id 'thrifty-jvm-module'
    id 'java-gradle-plugin'
    id 'com.vanniktech.maven.publish'
    id 'com.gradle.plugin-publish'
}

pluginBundle {
    website = 'https://github.com/microsoft/thrifty'
    vcsUrl = 'https://github.com/microsoft/thrifty.git'
    tags = ['thrift', 'code-generation', 'thrifty']
}

gradlePlugin {
    plugins {
        thriftyPlugin {
            id = 'com.microsoft.thrifty'
            displayName = 'Thrifty Gradle Plugin'
            description = 'Generates Java and/or Kotlin sources from .thrift files'
            implementationClass = 'com.microsoft.thrifty.gradle.ThriftyGradlePlugin'
        }
    }
}

def versionTask = tasks.register("generateVersionProps") { t ->
    def generatedResourcesDir = project.layout.buildDirectory.dir(["generated", "sources", "thrifty", "src", "main", "resources"].join(File.separator))
    def outputFile = generatedResourcesDir.map {it -> it.file("thrifty-version.properties") }

    t.inputs.property("thrifty-version", VERSION_NAME)
    t.inputs.property("kotlin-version", KOTLIN_VERSION)
    t.outputs.dir(generatedResourcesDir).withPropertyName("outputDir")

    doFirst {
        outputFile.get().getAsFile().with {
            it.delete()
            it << "THRIFTY_VERSION=${VERSION_NAME}\n"
            it << "KOTLIN_VERSION=${KOTLIN_VERSION}\n"
        }
    }
}

tasks.named("clean") {
    delete versionTask
}

sourceSets {
    main {
        resources {
            srcDirs += versionTask
        }
    }
}

dependencies {
    compileOnly gradleApi()

    compileOnly project(':thrifty-java-codegen')
    compileOnly project(':thrifty-kotlin-codegen')
    compileOnly project(':thrifty-schema')

    implementation deps.guava

    testImplementation deps.junit
    testImplementation deps.hamcrest
}

def installLocal = tasks.register("installForTesting") {
    dependsOn project.rootProject.subprojects
            .collect {it.tasks.findByName("publishToMavenLocal") }
            .findAll { it != null }
}

tasks.withType(Test) {
    dependsOn installLocal
}
