/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.microsoft.thrifty.test.gen;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-05")
public class Insanity implements org.apache.thrift.TBase<Insanity, Insanity._Fields>, java.io.Serializable, Cloneable, Comparable<Insanity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Insanity");

  private static final org.apache.thrift.protocol.TField USER_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("userMap", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField XTRUCTS_FIELD_DESC = new org.apache.thrift.protocol.TField("xtructs", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new InsanityStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new InsanityTupleSchemeFactory();

  public java.util.Map<Numberz,java.lang.Long> userMap; // required
  public java.util.List<Xtruct> xtructs; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_MAP((short)1, "userMap"),
    XTRUCTS((short)2, "xtructs");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_MAP
          return USER_MAP;
        case 2: // XTRUCTS
          return XTRUCTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_MAP, new org.apache.thrift.meta_data.FieldMetaData("userMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Numberz.class), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64            , "UserId"))));
    tmpMap.put(_Fields.XTRUCTS, new org.apache.thrift.meta_data.FieldMetaData("xtructs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Xtruct.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Insanity.class, metaDataMap);
  }

  public Insanity() {
  }

  public Insanity(
    java.util.Map<Numberz,java.lang.Long> userMap,
    java.util.List<Xtruct> xtructs)
  {
    this();
    this.userMap = userMap;
    this.xtructs = xtructs;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Insanity(Insanity other) {
    if (other.isSetUserMap()) {
      java.util.Map<Numberz,java.lang.Long> __this__userMap = new java.util.EnumMap<Numberz,java.lang.Long>(Numberz.class);
      for (java.util.Map.Entry<Numberz, java.lang.Long> other_element : other.userMap.entrySet()) {

        Numberz other_element_key = other_element.getKey();
        java.lang.Long other_element_value = other_element.getValue();

        Numberz __this__userMap_copy_key = other_element_key;

        java.lang.Long __this__userMap_copy_value = other_element_value;

        __this__userMap.put(__this__userMap_copy_key, __this__userMap_copy_value);
      }
      this.userMap = __this__userMap;
    }
    if (other.isSetXtructs()) {
      java.util.List<Xtruct> __this__xtructs = new java.util.ArrayList<Xtruct>(other.xtructs.size());
      for (Xtruct other_element : other.xtructs) {
        __this__xtructs.add(new Xtruct(other_element));
      }
      this.xtructs = __this__xtructs;
    }
  }

  public Insanity deepCopy() {
    return new Insanity(this);
  }

  @Override
  public void clear() {
    this.userMap = null;
    this.xtructs = null;
  }

  public int getUserMapSize() {
    return (this.userMap == null) ? 0 : this.userMap.size();
  }

  public void putToUserMap(Numberz key, long val) {
    if (this.userMap == null) {
      this.userMap = new java.util.EnumMap<Numberz,java.lang.Long>(Numberz.class);
    }
    this.userMap.put(key, val);
  }

  public java.util.Map<Numberz,java.lang.Long> getUserMap() {
    return this.userMap;
  }

  public Insanity setUserMap(java.util.Map<Numberz,java.lang.Long> userMap) {
    this.userMap = userMap;
    return this;
  }

  public void unsetUserMap() {
    this.userMap = null;
  }

  /** Returns true if field userMap is set (has been assigned a value) and false otherwise */
  public boolean isSetUserMap() {
    return this.userMap != null;
  }

  public void setUserMapIsSet(boolean value) {
    if (!value) {
      this.userMap = null;
    }
  }

  public int getXtructsSize() {
    return (this.xtructs == null) ? 0 : this.xtructs.size();
  }

  public java.util.Iterator<Xtruct> getXtructsIterator() {
    return (this.xtructs == null) ? null : this.xtructs.iterator();
  }

  public void addToXtructs(Xtruct elem) {
    if (this.xtructs == null) {
      this.xtructs = new java.util.ArrayList<Xtruct>();
    }
    this.xtructs.add(elem);
  }

  public java.util.List<Xtruct> getXtructs() {
    return this.xtructs;
  }

  public Insanity setXtructs(java.util.List<Xtruct> xtructs) {
    this.xtructs = xtructs;
    return this;
  }

  public void unsetXtructs() {
    this.xtructs = null;
  }

  /** Returns true if field xtructs is set (has been assigned a value) and false otherwise */
  public boolean isSetXtructs() {
    return this.xtructs != null;
  }

  public void setXtructsIsSet(boolean value) {
    if (!value) {
      this.xtructs = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case USER_MAP:
      if (value == null) {
        unsetUserMap();
      } else {
        setUserMap((java.util.Map<Numberz,java.lang.Long>)value);
      }
      break;

    case XTRUCTS:
      if (value == null) {
        unsetXtructs();
      } else {
        setXtructs((java.util.List<Xtruct>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_MAP:
      return getUserMap();

    case XTRUCTS:
      return getXtructs();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case USER_MAP:
      return isSetUserMap();
    case XTRUCTS:
      return isSetXtructs();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Insanity)
      return this.equals((Insanity)that);
    return false;
  }

  public boolean equals(Insanity that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_userMap = true && this.isSetUserMap();
    boolean that_present_userMap = true && that.isSetUserMap();
    if (this_present_userMap || that_present_userMap) {
      if (!(this_present_userMap && that_present_userMap))
        return false;
      if (!this.userMap.equals(that.userMap))
        return false;
    }

    boolean this_present_xtructs = true && this.isSetXtructs();
    boolean that_present_xtructs = true && that.isSetXtructs();
    if (this_present_xtructs || that_present_xtructs) {
      if (!(this_present_xtructs && that_present_xtructs))
        return false;
      if (!this.xtructs.equals(that.xtructs))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUserMap()) ? 131071 : 524287);
    if (isSetUserMap())
      hashCode = hashCode * 8191 + userMap.hashCode();

    hashCode = hashCode * 8191 + ((isSetXtructs()) ? 131071 : 524287);
    if (isSetXtructs())
      hashCode = hashCode * 8191 + xtructs.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Insanity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetUserMap()).compareTo(other.isSetUserMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userMap, other.userMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetXtructs()).compareTo(other.isSetXtructs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXtructs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xtructs, other.xtructs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Insanity(");
    boolean first = true;

    sb.append("userMap:");
    if (this.userMap == null) {
      sb.append("null");
    } else {
      sb.append(this.userMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("xtructs:");
    if (this.xtructs == null) {
      sb.append("null");
    } else {
      sb.append(this.xtructs);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class InsanityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public InsanityStandardScheme getScheme() {
      return new InsanityStandardScheme();
    }
  }

  private static class InsanityStandardScheme extends org.apache.thrift.scheme.StandardScheme<Insanity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Insanity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.userMap = new java.util.EnumMap<Numberz,java.lang.Long>(Numberz.class);
                Numberz _key1;
                long _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = com.microsoft.thrifty.test.gen.Numberz.findByValue(iprot.readI32());
                  _val2 = iprot.readI64();
                  if (_key1 != null)
                  {
                    struct.userMap.put(_key1, _val2);
                  }
                }
                iprot.readMapEnd();
              }
              struct.setUserMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // XTRUCTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
                struct.xtructs = new java.util.ArrayList<Xtruct>(_list4.size);
                Xtruct _elem5;
                for (int _i6 = 0; _i6 < _list4.size; ++_i6)
                {
                  _elem5 = new Xtruct();
                  _elem5.read(iprot);
                  struct.xtructs.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setXtructsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Insanity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.userMap != null) {
        oprot.writeFieldBegin(USER_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I64, struct.userMap.size()));
          for (java.util.Map.Entry<Numberz, java.lang.Long> _iter7 : struct.userMap.entrySet())
          {
            oprot.writeI32(_iter7.getKey().getValue());
            oprot.writeI64(_iter7.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.xtructs != null) {
        oprot.writeFieldBegin(XTRUCTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.xtructs.size()));
          for (Xtruct _iter8 : struct.xtructs)
          {
            _iter8.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class InsanityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public InsanityTupleScheme getScheme() {
      return new InsanityTupleScheme();
    }
  }

  private static class InsanityTupleScheme extends org.apache.thrift.scheme.TupleScheme<Insanity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Insanity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUserMap()) {
        optionals.set(0);
      }
      if (struct.isSetXtructs()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetUserMap()) {
        {
          oprot.writeI32(struct.userMap.size());
          for (java.util.Map.Entry<Numberz, java.lang.Long> _iter9 : struct.userMap.entrySet())
          {
            oprot.writeI32(_iter9.getKey().getValue());
            oprot.writeI64(_iter9.getValue());
          }
        }
      }
      if (struct.isSetXtructs()) {
        {
          oprot.writeI32(struct.xtructs.size());
          for (Xtruct _iter10 : struct.xtructs)
          {
            _iter10.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Insanity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map11 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.userMap = new java.util.EnumMap<Numberz,java.lang.Long>(Numberz.class);
          Numberz _key12;
          long _val13;
          for (int _i14 = 0; _i14 < _map11.size; ++_i14)
          {
            _key12 = com.microsoft.thrifty.test.gen.Numberz.findByValue(iprot.readI32());
            _val13 = iprot.readI64();
            if (_key12 != null)
            {
              struct.userMap.put(_key12, _val13);
            }
          }
        }
        struct.setUserMapIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.xtructs = new java.util.ArrayList<Xtruct>(_list15.size);
          Xtruct _elem16;
          for (int _i17 = 0; _i17 < _list15.size; ++_i17)
          {
            _elem16 = new Xtruct();
            _elem16.read(iprot);
            struct.xtructs.add(_elem16);
          }
        }
        struct.setXtructsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

