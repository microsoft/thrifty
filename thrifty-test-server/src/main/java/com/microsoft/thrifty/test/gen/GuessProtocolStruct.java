/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.microsoft.thrifty.test.gen;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-04-19")
public class GuessProtocolStruct implements org.apache.thrift.TBase<GuessProtocolStruct, GuessProtocolStruct._Fields>, java.io.Serializable, Cloneable, Comparable<GuessProtocolStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GuessProtocolStruct");

  private static final org.apache.thrift.protocol.TField MAP_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("map_field", org.apache.thrift.protocol.TType.MAP, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GuessProtocolStructStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GuessProtocolStructTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> map_field; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MAP_FIELD((short)7, "map_field");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 7: // MAP_FIELD
          return MAP_FIELD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MAP_FIELD, new org.apache.thrift.meta_data.FieldMetaData("map_field", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GuessProtocolStruct.class, metaDataMap);
  }

  public GuessProtocolStruct() {
  }

  public GuessProtocolStruct(
    java.util.Map<java.lang.String,java.lang.String> map_field)
  {
    this();
    this.map_field = map_field;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GuessProtocolStruct(GuessProtocolStruct other) {
    if (other.isSetMap_field()) {
      java.util.Map<java.lang.String,java.lang.String> __this__map_field = new java.util.HashMap<java.lang.String,java.lang.String>(other.map_field);
      this.map_field = __this__map_field;
    }
  }

  public GuessProtocolStruct deepCopy() {
    return new GuessProtocolStruct(this);
  }

  @Override
  public void clear() {
    this.map_field = null;
  }

  public int getMap_fieldSize() {
    return (this.map_field == null) ? 0 : this.map_field.size();
  }

  public void putToMap_field(java.lang.String key, java.lang.String val) {
    if (this.map_field == null) {
      this.map_field = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.map_field.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getMap_field() {
    return this.map_field;
  }

  public GuessProtocolStruct setMap_field(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> map_field) {
    this.map_field = map_field;
    return this;
  }

  public void unsetMap_field() {
    this.map_field = null;
  }

  /** Returns true if field map_field is set (has been assigned a value) and false otherwise */
  public boolean isSetMap_field() {
    return this.map_field != null;
  }

  public void setMap_fieldIsSet(boolean value) {
    if (!value) {
      this.map_field = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case MAP_FIELD:
      if (value == null) {
        unsetMap_field();
      } else {
        setMap_field((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case MAP_FIELD:
      return getMap_field();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case MAP_FIELD:
      return isSetMap_field();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof GuessProtocolStruct)
      return this.equals((GuessProtocolStruct)that);
    return false;
  }

  public boolean equals(GuessProtocolStruct that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_map_field = true && this.isSetMap_field();
    boolean that_present_map_field = true && that.isSetMap_field();
    if (this_present_map_field || that_present_map_field) {
      if (!(this_present_map_field && that_present_map_field))
        return false;
      if (!this.map_field.equals(that.map_field))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetMap_field()) ? 131071 : 524287);
    if (isSetMap_field())
      hashCode = hashCode * 8191 + map_field.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(GuessProtocolStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetMap_field()).compareTo(other.isSetMap_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMap_field()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.map_field, other.map_field);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("GuessProtocolStruct(");
    boolean first = true;

    sb.append("map_field:");
    if (this.map_field == null) {
      sb.append("null");
    } else {
      sb.append(this.map_field);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GuessProtocolStructStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GuessProtocolStructStandardScheme getScheme() {
      return new GuessProtocolStructStandardScheme();
    }
  }

  private static class GuessProtocolStructStandardScheme extends org.apache.thrift.scheme.StandardScheme<GuessProtocolStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GuessProtocolStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 7: // MAP_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map130 = iprot.readMapBegin();
                struct.map_field = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map130.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key131;
                @org.apache.thrift.annotation.Nullable java.lang.String _val132;
                for (int _i133 = 0; _i133 < _map130.size; ++_i133)
                {
                  _key131 = iprot.readString();
                  _val132 = iprot.readString();
                  struct.map_field.put(_key131, _val132);
                }
                iprot.readMapEnd();
              }
              struct.setMap_fieldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GuessProtocolStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.map_field != null) {
        oprot.writeFieldBegin(MAP_FIELD_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.map_field.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter134 : struct.map_field.entrySet())
          {
            oprot.writeString(_iter134.getKey());
            oprot.writeString(_iter134.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GuessProtocolStructTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GuessProtocolStructTupleScheme getScheme() {
      return new GuessProtocolStructTupleScheme();
    }
  }

  private static class GuessProtocolStructTupleScheme extends org.apache.thrift.scheme.TupleScheme<GuessProtocolStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GuessProtocolStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetMap_field()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetMap_field()) {
        {
          oprot.writeI32(struct.map_field.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter135 : struct.map_field.entrySet())
          {
            oprot.writeString(_iter135.getKey());
            oprot.writeString(_iter135.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GuessProtocolStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map136 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.map_field = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map136.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key137;
          @org.apache.thrift.annotation.Nullable java.lang.String _val138;
          for (int _i139 = 0; _i139 < _map136.size; ++_i139)
          {
            _key137 = iprot.readString();
            _val138 = iprot.readString();
            struct.map_field.put(_key137, _val138);
          }
        }
        struct.setMap_fieldIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

