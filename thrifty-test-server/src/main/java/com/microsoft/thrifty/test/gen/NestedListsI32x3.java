/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.microsoft.thrifty.test.gen;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})

public class NestedListsI32x3 implements org.apache.thrift.TBase<NestedListsI32x3, NestedListsI32x3._Fields>, java.io.Serializable, Cloneable, Comparable<NestedListsI32x3> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NestedListsI32x3");

  private static final org.apache.thrift.protocol.TField INTEGERLIST_FIELD_DESC = new org.apache.thrift.protocol.TField("integerlist", org.apache.thrift.protocol.TType.LIST, (short)1);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new NestedListsI32x3StandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new NestedListsI32x3TupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.util.List<java.lang.Integer>>> integerlist; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INTEGERLIST((short)1, "integerlist");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INTEGERLIST
          return INTEGERLIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INTEGERLIST, new org.apache.thrift.meta_data.FieldMetaData("integerlist", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NestedListsI32x3.class, metaDataMap);
  }

  public NestedListsI32x3() {
  }

  public NestedListsI32x3(
    java.util.List<java.util.List<java.util.List<java.lang.Integer>>> integerlist)
  {
    this();
    this.integerlist = integerlist;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NestedListsI32x3(NestedListsI32x3 other) {
    if (other.isSetIntegerlist()) {
      java.util.List<java.util.List<java.util.List<java.lang.Integer>>> __this__integerlist = new java.util.ArrayList<java.util.List<java.util.List<java.lang.Integer>>>(other.integerlist.size());
      for (java.util.List<java.util.List<java.lang.Integer>> other_element : other.integerlist) {
        java.util.List<java.util.List<java.lang.Integer>> __this__integerlist_copy = new java.util.ArrayList<java.util.List<java.lang.Integer>>(other_element.size());
        for (java.util.List<java.lang.Integer> other_element_element : other_element) {
          java.util.List<java.lang.Integer> __this__integerlist_copy_copy = new java.util.ArrayList<java.lang.Integer>(other_element_element);
          __this__integerlist_copy.add(__this__integerlist_copy_copy);
        }
        __this__integerlist.add(__this__integerlist_copy);
      }
      this.integerlist = __this__integerlist;
    }
  }

  public NestedListsI32x3 deepCopy() {
    return new NestedListsI32x3(this);
  }

  @Override
  public void clear() {
    this.integerlist = null;
  }

  public int getIntegerlistSize() {
    return (this.integerlist == null) ? 0 : this.integerlist.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.List<java.util.List<java.lang.Integer>>> getIntegerlistIterator() {
    return (this.integerlist == null) ? null : this.integerlist.iterator();
  }

  public void addToIntegerlist(java.util.List<java.util.List<java.lang.Integer>> elem) {
    if (this.integerlist == null) {
      this.integerlist = new java.util.ArrayList<java.util.List<java.util.List<java.lang.Integer>>>();
    }
    this.integerlist.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.List<java.util.List<java.lang.Integer>>> getIntegerlist() {
    return this.integerlist;
  }

  public NestedListsI32x3 setIntegerlist(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.util.List<java.lang.Integer>>> integerlist) {
    this.integerlist = integerlist;
    return this;
  }

  public void unsetIntegerlist() {
    this.integerlist = null;
  }

  /** Returns true if field integerlist is set (has been assigned a value) and false otherwise */
  public boolean isSetIntegerlist() {
    return this.integerlist != null;
  }

  public void setIntegerlistIsSet(boolean value) {
    if (!value) {
      this.integerlist = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case INTEGERLIST:
      if (value == null) {
        unsetIntegerlist();
      } else {
        setIntegerlist((java.util.List<java.util.List<java.util.List<java.lang.Integer>>>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case INTEGERLIST:
      return getIntegerlist();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case INTEGERLIST:
      return isSetIntegerlist();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof NestedListsI32x3)
      return this.equals((NestedListsI32x3)that);
    return false;
  }

  public boolean equals(NestedListsI32x3 that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_integerlist = true && this.isSetIntegerlist();
    boolean that_present_integerlist = true && that.isSetIntegerlist();
    if (this_present_integerlist || that_present_integerlist) {
      if (!(this_present_integerlist && that_present_integerlist))
        return false;
      if (!this.integerlist.equals(that.integerlist))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetIntegerlist()) ? 131071 : 524287);
    if (isSetIntegerlist())
      hashCode = hashCode * 8191 + integerlist.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(NestedListsI32x3 other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetIntegerlist()).compareTo(other.isSetIntegerlist());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntegerlist()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.integerlist, other.integerlist);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("NestedListsI32x3(");
    boolean first = true;

    sb.append("integerlist:");
    if (this.integerlist == null) {
      sb.append("null");
    } else {
      sb.append(this.integerlist);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NestedListsI32x3StandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NestedListsI32x3StandardScheme getScheme() {
      return new NestedListsI32x3StandardScheme();
    }
  }

  private static class NestedListsI32x3StandardScheme extends org.apache.thrift.scheme.StandardScheme<NestedListsI32x3> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NestedListsI32x3 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INTEGERLIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list172 = iprot.readListBegin();
                struct.integerlist = new java.util.ArrayList<java.util.List<java.util.List<java.lang.Integer>>>(_list172.size);
                @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Integer>> _elem173;
                for (int _i174 = 0; _i174 < _list172.size; ++_i174)
                {
                  {
                    org.apache.thrift.protocol.TList _list175 = iprot.readListBegin();
                    _elem173 = new java.util.ArrayList<java.util.List<java.lang.Integer>>(_list175.size);
                    @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _elem176;
                    for (int _i177 = 0; _i177 < _list175.size; ++_i177)
                    {
                      {
                        org.apache.thrift.protocol.TList _list178 = iprot.readListBegin();
                        _elem176 = new java.util.ArrayList<java.lang.Integer>(_list178.size);
                        int _elem179;
                        for (int _i180 = 0; _i180 < _list178.size; ++_i180)
                        {
                          _elem179 = iprot.readI32();
                          _elem176.add(_elem179);
                        }
                        iprot.readListEnd();
                      }
                      _elem173.add(_elem176);
                    }
                    iprot.readListEnd();
                  }
                  struct.integerlist.add(_elem173);
                }
                iprot.readListEnd();
              }
              struct.setIntegerlistIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NestedListsI32x3 struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.integerlist != null) {
        oprot.writeFieldBegin(INTEGERLIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.integerlist.size()));
          for (java.util.List<java.util.List<java.lang.Integer>> _iter181 : struct.integerlist)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, _iter181.size()));
              for (java.util.List<java.lang.Integer> _iter182 : _iter181)
              {
                {
                  oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter182.size()));
                  for (int _iter183 : _iter182)
                  {
                    oprot.writeI32(_iter183);
                  }
                  oprot.writeListEnd();
                }
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NestedListsI32x3TupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NestedListsI32x3TupleScheme getScheme() {
      return new NestedListsI32x3TupleScheme();
    }
  }

  private static class NestedListsI32x3TupleScheme extends org.apache.thrift.scheme.TupleScheme<NestedListsI32x3> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NestedListsI32x3 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetIntegerlist()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetIntegerlist()) {
        {
          oprot.writeI32(struct.integerlist.size());
          for (java.util.List<java.util.List<java.lang.Integer>> _iter184 : struct.integerlist)
          {
            {
              oprot.writeI32(_iter184.size());
              for (java.util.List<java.lang.Integer> _iter185 : _iter184)
              {
                {
                  oprot.writeI32(_iter185.size());
                  for (int _iter186 : _iter185)
                  {
                    oprot.writeI32(_iter186);
                  }
                }
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NestedListsI32x3 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list187 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.integerlist = new java.util.ArrayList<java.util.List<java.util.List<java.lang.Integer>>>(_list187.size);
          @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Integer>> _elem188;
          for (int _i189 = 0; _i189 < _list187.size; ++_i189)
          {
            {
              org.apache.thrift.protocol.TList _list190 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
              _elem188 = new java.util.ArrayList<java.util.List<java.lang.Integer>>(_list190.size);
              @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _elem191;
              for (int _i192 = 0; _i192 < _list190.size; ++_i192)
              {
                {
                  org.apache.thrift.protocol.TList _list193 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                  _elem191 = new java.util.ArrayList<java.lang.Integer>(_list193.size);
                  int _elem194;
                  for (int _i195 = 0; _i195 < _list193.size; ++_i195)
                  {
                    _elem194 = iprot.readI32();
                    _elem191.add(_elem194);
                  }
                }
                _elem188.add(_elem191);
              }
            }
            struct.integerlist.add(_elem188);
          }
        }
        struct.setIntegerlistIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

