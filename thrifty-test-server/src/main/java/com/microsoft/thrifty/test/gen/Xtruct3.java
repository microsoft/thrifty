/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.microsoft.thrifty.test.gen;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})

public class Xtruct3 implements org.apache.thrift.TBase<Xtruct3, Xtruct3._Fields>, java.io.Serializable, Cloneable, Comparable<Xtruct3> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Xtruct3");

  private static final org.apache.thrift.protocol.TField STRING_THING_FIELD_DESC = new org.apache.thrift.protocol.TField("string_thing", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CHANGED_FIELD_DESC = new org.apache.thrift.protocol.TField("changed", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField I32_THING_FIELD_DESC = new org.apache.thrift.protocol.TField("i32_thing", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField I64_THING_FIELD_DESC = new org.apache.thrift.protocol.TField("i64_thing", org.apache.thrift.protocol.TType.I64, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Xtruct3StandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Xtruct3TupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String string_thing; // required
  public int changed; // required
  public int i32_thing; // required
  public long i64_thing; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STRING_THING((short)1, "string_thing"),
    CHANGED((short)4, "changed"),
    I32_THING((short)9, "i32_thing"),
    I64_THING((short)11, "i64_thing");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STRING_THING
          return STRING_THING;
        case 4: // CHANGED
          return CHANGED;
        case 9: // I32_THING
          return I32_THING;
        case 11: // I64_THING
          return I64_THING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CHANGED_ISSET_ID = 0;
  private static final int __I32_THING_ISSET_ID = 1;
  private static final int __I64_THING_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STRING_THING, new org.apache.thrift.meta_data.FieldMetaData("string_thing", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANGED, new org.apache.thrift.meta_data.FieldMetaData("changed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.I32_THING, new org.apache.thrift.meta_data.FieldMetaData("i32_thing", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.I64_THING, new org.apache.thrift.meta_data.FieldMetaData("i64_thing", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Xtruct3.class, metaDataMap);
  }

  public Xtruct3() {
  }

  public Xtruct3(
    java.lang.String string_thing,
    int changed,
    int i32_thing,
    long i64_thing)
  {
    this();
    this.string_thing = string_thing;
    this.changed = changed;
    setChangedIsSet(true);
    this.i32_thing = i32_thing;
    setI32_thingIsSet(true);
    this.i64_thing = i64_thing;
    setI64_thingIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Xtruct3(Xtruct3 other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetString_thing()) {
      this.string_thing = other.string_thing;
    }
    this.changed = other.changed;
    this.i32_thing = other.i32_thing;
    this.i64_thing = other.i64_thing;
  }

  public Xtruct3 deepCopy() {
    return new Xtruct3(this);
  }

  @Override
  public void clear() {
    this.string_thing = null;
    setChangedIsSet(false);
    this.changed = 0;
    setI32_thingIsSet(false);
    this.i32_thing = 0;
    setI64_thingIsSet(false);
    this.i64_thing = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getString_thing() {
    return this.string_thing;
  }

  public Xtruct3 setString_thing(@org.apache.thrift.annotation.Nullable java.lang.String string_thing) {
    this.string_thing = string_thing;
    return this;
  }

  public void unsetString_thing() {
    this.string_thing = null;
  }

  /** Returns true if field string_thing is set (has been assigned a value) and false otherwise */
  public boolean isSetString_thing() {
    return this.string_thing != null;
  }

  public void setString_thingIsSet(boolean value) {
    if (!value) {
      this.string_thing = null;
    }
  }

  public int getChanged() {
    return this.changed;
  }

  public Xtruct3 setChanged(int changed) {
    this.changed = changed;
    setChangedIsSet(true);
    return this;
  }

  public void unsetChanged() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHANGED_ISSET_ID);
  }

  /** Returns true if field changed is set (has been assigned a value) and false otherwise */
  public boolean isSetChanged() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHANGED_ISSET_ID);
  }

  public void setChangedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHANGED_ISSET_ID, value);
  }

  public int getI32_thing() {
    return this.i32_thing;
  }

  public Xtruct3 setI32_thing(int i32_thing) {
    this.i32_thing = i32_thing;
    setI32_thingIsSet(true);
    return this;
  }

  public void unsetI32_thing() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __I32_THING_ISSET_ID);
  }

  /** Returns true if field i32_thing is set (has been assigned a value) and false otherwise */
  public boolean isSetI32_thing() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __I32_THING_ISSET_ID);
  }

  public void setI32_thingIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __I32_THING_ISSET_ID, value);
  }

  public long getI64_thing() {
    return this.i64_thing;
  }

  public Xtruct3 setI64_thing(long i64_thing) {
    this.i64_thing = i64_thing;
    setI64_thingIsSet(true);
    return this;
  }

  public void unsetI64_thing() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __I64_THING_ISSET_ID);
  }

  /** Returns true if field i64_thing is set (has been assigned a value) and false otherwise */
  public boolean isSetI64_thing() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __I64_THING_ISSET_ID);
  }

  public void setI64_thingIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __I64_THING_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case STRING_THING:
      if (value == null) {
        unsetString_thing();
      } else {
        setString_thing((java.lang.String)value);
      }
      break;

    case CHANGED:
      if (value == null) {
        unsetChanged();
      } else {
        setChanged((java.lang.Integer)value);
      }
      break;

    case I32_THING:
      if (value == null) {
        unsetI32_thing();
      } else {
        setI32_thing((java.lang.Integer)value);
      }
      break;

    case I64_THING:
      if (value == null) {
        unsetI64_thing();
      } else {
        setI64_thing((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STRING_THING:
      return getString_thing();

    case CHANGED:
      return getChanged();

    case I32_THING:
      return getI32_thing();

    case I64_THING:
      return getI64_thing();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STRING_THING:
      return isSetString_thing();
    case CHANGED:
      return isSetChanged();
    case I32_THING:
      return isSetI32_thing();
    case I64_THING:
      return isSetI64_thing();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Xtruct3)
      return this.equals((Xtruct3)that);
    return false;
  }

  public boolean equals(Xtruct3 that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_string_thing = true && this.isSetString_thing();
    boolean that_present_string_thing = true && that.isSetString_thing();
    if (this_present_string_thing || that_present_string_thing) {
      if (!(this_present_string_thing && that_present_string_thing))
        return false;
      if (!this.string_thing.equals(that.string_thing))
        return false;
    }

    boolean this_present_changed = true;
    boolean that_present_changed = true;
    if (this_present_changed || that_present_changed) {
      if (!(this_present_changed && that_present_changed))
        return false;
      if (this.changed != that.changed)
        return false;
    }

    boolean this_present_i32_thing = true;
    boolean that_present_i32_thing = true;
    if (this_present_i32_thing || that_present_i32_thing) {
      if (!(this_present_i32_thing && that_present_i32_thing))
        return false;
      if (this.i32_thing != that.i32_thing)
        return false;
    }

    boolean this_present_i64_thing = true;
    boolean that_present_i64_thing = true;
    if (this_present_i64_thing || that_present_i64_thing) {
      if (!(this_present_i64_thing && that_present_i64_thing))
        return false;
      if (this.i64_thing != that.i64_thing)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetString_thing()) ? 131071 : 524287);
    if (isSetString_thing())
      hashCode = hashCode * 8191 + string_thing.hashCode();

    hashCode = hashCode * 8191 + changed;

    hashCode = hashCode * 8191 + i32_thing;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(i64_thing);

    return hashCode;
  }

  @Override
  public int compareTo(Xtruct3 other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetString_thing()).compareTo(other.isSetString_thing());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetString_thing()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.string_thing, other.string_thing);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChanged()).compareTo(other.isSetChanged());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChanged()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.changed, other.changed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetI32_thing()).compareTo(other.isSetI32_thing());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI32_thing()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i32_thing, other.i32_thing);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetI64_thing()).compareTo(other.isSetI64_thing());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI64_thing()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i64_thing, other.i64_thing);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Xtruct3(");
    boolean first = true;

    sb.append("string_thing:");
    if (this.string_thing == null) {
      sb.append("null");
    } else {
      sb.append(this.string_thing);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("changed:");
    sb.append(this.changed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("i32_thing:");
    sb.append(this.i32_thing);
    first = false;
    if (!first) sb.append(", ");
    sb.append("i64_thing:");
    sb.append(this.i64_thing);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class Xtruct3StandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public Xtruct3StandardScheme getScheme() {
      return new Xtruct3StandardScheme();
    }
  }

  private static class Xtruct3StandardScheme extends org.apache.thrift.scheme.StandardScheme<Xtruct3> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Xtruct3 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STRING_THING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.string_thing = iprot.readString();
              struct.setString_thingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHANGED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.changed = iprot.readI32();
              struct.setChangedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // I32_THING
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.i32_thing = iprot.readI32();
              struct.setI32_thingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // I64_THING
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.i64_thing = iprot.readI64();
              struct.setI64_thingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Xtruct3 struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.string_thing != null) {
        oprot.writeFieldBegin(STRING_THING_FIELD_DESC);
        oprot.writeString(struct.string_thing);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHANGED_FIELD_DESC);
      oprot.writeI32(struct.changed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(I32_THING_FIELD_DESC);
      oprot.writeI32(struct.i32_thing);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(I64_THING_FIELD_DESC);
      oprot.writeI64(struct.i64_thing);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class Xtruct3TupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public Xtruct3TupleScheme getScheme() {
      return new Xtruct3TupleScheme();
    }
  }

  private static class Xtruct3TupleScheme extends org.apache.thrift.scheme.TupleScheme<Xtruct3> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Xtruct3 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetString_thing()) {
        optionals.set(0);
      }
      if (struct.isSetChanged()) {
        optionals.set(1);
      }
      if (struct.isSetI32_thing()) {
        optionals.set(2);
      }
      if (struct.isSetI64_thing()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetString_thing()) {
        oprot.writeString(struct.string_thing);
      }
      if (struct.isSetChanged()) {
        oprot.writeI32(struct.changed);
      }
      if (struct.isSetI32_thing()) {
        oprot.writeI32(struct.i32_thing);
      }
      if (struct.isSetI64_thing()) {
        oprot.writeI64(struct.i64_thing);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Xtruct3 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.string_thing = iprot.readString();
        struct.setString_thingIsSet(true);
      }
      if (incoming.get(1)) {
        struct.changed = iprot.readI32();
        struct.setChangedIsSet(true);
      }
      if (incoming.get(2)) {
        struct.i32_thing = iprot.readI32();
        struct.setI32_thingIsSet(true);
      }
      if (incoming.get(3)) {
        struct.i64_thing = iprot.readI64();
        struct.setI64_thingIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

