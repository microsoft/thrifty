/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.microsoft.thrifty.test.gen;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-04-19")
public class NonEmptyUnion extends org.apache.thrift.TUnion<NonEmptyUnion, NonEmptyUnion._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NonEmptyUnion");
  private static final org.apache.thrift.protocol.TField AN_INT_FIELD_DESC = new org.apache.thrift.protocol.TField("AnInt", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ALONG_FIELD_DESC = new org.apache.thrift.protocol.TField("ALong", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField ASTRING_FIELD_DESC = new org.apache.thrift.protocol.TField("AString", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ABONK_FIELD_DESC = new org.apache.thrift.protocol.TField("ABonk", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AN_INT((short)1, "AnInt"),
    ALONG((short)2, "ALong"),
    ASTRING((short)3, "AString"),
    ABONK((short)4, "ABonk");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AN_INT
          return AN_INT;
        case 2: // ALONG
          return ALONG;
        case 3: // ASTRING
          return ASTRING;
        case 4: // ABONK
          return ABONK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AN_INT, new org.apache.thrift.meta_data.FieldMetaData("AnInt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ALONG, new org.apache.thrift.meta_data.FieldMetaData("ALong", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ASTRING, new org.apache.thrift.meta_data.FieldMetaData("AString", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ABONK, new org.apache.thrift.meta_data.FieldMetaData("ABonk", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Bonk.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NonEmptyUnion.class, metaDataMap);
  }

  public NonEmptyUnion() {
    super();
  }

  public NonEmptyUnion(_Fields setField, java.lang.Object value) {
    super(setField, value);
  }

  public NonEmptyUnion(NonEmptyUnion other) {
    super(other);
  }
  public NonEmptyUnion deepCopy() {
    return new NonEmptyUnion(this);
  }

  public static NonEmptyUnion AnInt(int value) {
    NonEmptyUnion x = new NonEmptyUnion();
    x.setAnInt(value);
    return x;
  }

  public static NonEmptyUnion ALong(long value) {
    NonEmptyUnion x = new NonEmptyUnion();
    x.setALong(value);
    return x;
  }

  public static NonEmptyUnion AString(java.lang.String value) {
    NonEmptyUnion x = new NonEmptyUnion();
    x.setAString(value);
    return x;
  }

  public static NonEmptyUnion ABonk(Bonk value) {
    NonEmptyUnion x = new NonEmptyUnion();
    x.setABonk(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, java.lang.Object value) throws java.lang.ClassCastException {
    switch (setField) {
      case AN_INT:
        if (value instanceof java.lang.Integer) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.Integer for field 'AnInt', but got " + value.getClass().getSimpleName());
      case ALONG:
        if (value instanceof java.lang.Long) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.Long for field 'ALong', but got " + value.getClass().getSimpleName());
      case ASTRING:
        if (value instanceof java.lang.String) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.String for field 'AString', but got " + value.getClass().getSimpleName());
      case ABONK:
        if (value instanceof Bonk) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type Bonk for field 'ABonk', but got " + value.getClass().getSimpleName());
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected java.lang.Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case AN_INT:
          if (field.type == AN_INT_FIELD_DESC.type) {
            java.lang.Integer AnInt;
            AnInt = iprot.readI32();
            return AnInt;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ALONG:
          if (field.type == ALONG_FIELD_DESC.type) {
            java.lang.Long ALong;
            ALong = iprot.readI64();
            return ALong;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ASTRING:
          if (field.type == ASTRING_FIELD_DESC.type) {
            java.lang.String AString;
            AString = iprot.readString();
            return AString;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ABONK:
          if (field.type == ABONK_FIELD_DESC.type) {
            Bonk ABonk;
            ABonk = new Bonk();
            ABonk.read(iprot);
            return ABonk;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case AN_INT:
        java.lang.Integer AnInt = (java.lang.Integer)value_;
        oprot.writeI32(AnInt);
        return;
      case ALONG:
        java.lang.Long ALong = (java.lang.Long)value_;
        oprot.writeI64(ALong);
        return;
      case ASTRING:
        java.lang.String AString = (java.lang.String)value_;
        oprot.writeString(AString);
        return;
      case ABONK:
        Bonk ABonk = (Bonk)value_;
        ABonk.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected java.lang.Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case AN_INT:
          java.lang.Integer AnInt;
          AnInt = iprot.readI32();
          return AnInt;
        case ALONG:
          java.lang.Long ALong;
          ALong = iprot.readI64();
          return ALong;
        case ASTRING:
          java.lang.String AString;
          AString = iprot.readString();
          return AString;
        case ABONK:
          Bonk ABonk;
          ABonk = new Bonk();
          ABonk.read(iprot);
          return ABonk;
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new org.apache.thrift.protocol.TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case AN_INT:
        java.lang.Integer AnInt = (java.lang.Integer)value_;
        oprot.writeI32(AnInt);
        return;
      case ALONG:
        java.lang.Long ALong = (java.lang.Long)value_;
        oprot.writeI64(ALong);
        return;
      case ASTRING:
        java.lang.String AString = (java.lang.String)value_;
        oprot.writeString(AString);
        return;
      case ABONK:
        Bonk ABonk = (Bonk)value_;
        ABonk.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case AN_INT:
        return AN_INT_FIELD_DESC;
      case ALONG:
        return ALONG_FIELD_DESC;
      case ASTRING:
        return ASTRING_FIELD_DESC;
      case ABONK:
        return ABONK_FIELD_DESC;
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public int getAnInt() {
    if (getSetField() == _Fields.AN_INT) {
      return (java.lang.Integer)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'AnInt' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAnInt(int value) {
    setField_ = _Fields.AN_INT;
    value_ = value;
  }

  public long getALong() {
    if (getSetField() == _Fields.ALONG) {
      return (java.lang.Long)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'ALong' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setALong(long value) {
    setField_ = _Fields.ALONG;
    value_ = value;
  }

  public java.lang.String getAString() {
    if (getSetField() == _Fields.ASTRING) {
      return (java.lang.String)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'AString' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAString(java.lang.String value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.ASTRING;
    value_ = value;
  }

  public Bonk getABonk() {
    if (getSetField() == _Fields.ABONK) {
      return (Bonk)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'ABonk' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setABonk(Bonk value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.ABONK;
    value_ = value;
  }

  public boolean isSetAnInt() {
    return setField_ == _Fields.AN_INT;
  }


  public boolean isSetALong() {
    return setField_ == _Fields.ALONG;
  }


  public boolean isSetAString() {
    return setField_ == _Fields.ASTRING;
  }


  public boolean isSetABonk() {
    return setField_ == _Fields.ABONK;
  }


  public boolean equals(java.lang.Object other) {
    if (other instanceof NonEmptyUnion) {
      return equals((NonEmptyUnion)other);
    } else {
      return false;
    }
  }

  public boolean equals(NonEmptyUnion other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(NonEmptyUnion other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    java.util.List<java.lang.Object> list = new java.util.ArrayList<java.lang.Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      java.lang.Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
