/*
 * Thrifty
 *
 * Copyright (c) Microsoft Corporation
 *
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * THIS CODE IS PROVIDED ON AN  *AS IS* BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING
 * WITHOUT LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE,
 * FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
 *
 * See the Apache Version 2.0 License for specific language governing permissions and limitations under the License.
 */
package com.microsoft.thrifty.integration.conformance.server

import com.microsoft.thrifty.testing.ServerProtocol
import com.microsoft.thrifty.testing.TestClient
import io.kotest.assertions.throwables.shouldThrow
import io.kotest.matchers.shouldBe
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.extension.RegisterExtension
import java.io.Closeable
import java.security.Permission

class BinaryServerConformanceTest : KotlinServerConformanceTest(ServerProtocol.BINARY)
class CompactServerConformanceTest : KotlinServerConformanceTest(ServerProtocol.COMPACT)
class JsonServerConformanceTest : KotlinServerConformanceTest(ServerProtocol.JSON)
/**
 * A test of auto-generated service code for the standard ThriftTest
 * service.
 *
 * Conformance is checked by roundtripping requests from a java client generated
 * by the official Thrift generator to the server implementation generated by Thrifty.
 * The test server has an implementation of ThriftTest methods with semantics as described in the
 * .thrift file itself and in the Apache Thrift git repo
 */
abstract class KotlinServerConformanceTest(
        private val serverProtocol: ServerProtocol
) {
    protected class ExitException(val status: Int) : Exception()

    private class NoExitSecurityManager : SecurityManager() {
        override fun checkPermission(perm: Permission) {
            // allow anything.
        }

        override fun checkPermission(perm: Permission, context: Any) {
            // allow anything.
        }

        override fun checkExit(status: Int) {
            throw ExitException(status)
        }
    }

    class NoExit : Closeable {
        init {
            System.setSecurityManager(NoExitSecurityManager())
        }

        override fun close() {
            System.setSecurityManager(null)
        }
    }

    @JvmField
    @RegisterExtension
    val testServer = TestServer(serverProtocol)

    @Test
    fun testServer() {
        val port = testServer.port()
        val protocol = when (serverProtocol) {
            ServerProtocol.BINARY -> "binary"
            ServerProtocol.COMPACT -> "compact"
            ServerProtocol.JSON -> "json"
        }
        val res = shouldThrow<ExitException> {
            NoExit().use {
                TestClient.main(arrayOf(
                        "--host=localhost",
                        "--port=$port",
                        "--transport=http",
                        "--protocol=$protocol"
                ))
            }
        }
        res.status shouldBe 0
    }
}

