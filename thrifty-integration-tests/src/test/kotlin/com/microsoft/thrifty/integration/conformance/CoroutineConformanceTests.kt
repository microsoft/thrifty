/*
 * Thrifty
 *
 * Copyright (c) Microsoft Corporation
 *
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * THIS CODE IS PROVIDED ON AN  *AS IS* BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING
 * WITHOUT LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE,
 * FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
 *
 * See the Apache Version 2.0 License for specific language governing permissions and limitations under the License.
 */
package com.microsoft.thrifty.integration.conformance

import com.microsoft.thrifty.ThriftException
import com.microsoft.thrifty.integration.kgen.coro.Insanity
import com.microsoft.thrifty.integration.kgen.coro.Numberz
import com.microsoft.thrifty.integration.kgen.coro.ThriftTestClient
import com.microsoft.thrifty.integration.kgen.coro.Xception
import com.microsoft.thrifty.integration.kgen.coro.Xception2
import com.microsoft.thrifty.integration.kgen.coro.Xtruct
import com.microsoft.thrifty.integration.kgen.coro.Xtruct2
import com.microsoft.thrifty.protocol.BinaryProtocol
import com.microsoft.thrifty.protocol.CompactProtocol
import com.microsoft.thrifty.protocol.DecoratingProtocol
import com.microsoft.thrifty.protocol.FieldMetadata
import com.microsoft.thrifty.protocol.JsonProtocol
import com.microsoft.thrifty.protocol.ListMetadata
import com.microsoft.thrifty.protocol.MapMetadata
import com.microsoft.thrifty.protocol.MessageMetadata
import com.microsoft.thrifty.protocol.Protocol
import com.microsoft.thrifty.protocol.SetMetadata
import com.microsoft.thrifty.protocol.StructMetadata
import com.microsoft.thrifty.service.AsyncClientBase
import com.microsoft.thrifty.testing.ServerProtocol
import com.microsoft.thrifty.testing.ServerTransport
import com.microsoft.thrifty.testing.TestServer
import com.microsoft.thrifty.transport.FramedTransport
import com.microsoft.thrifty.transport.SocketTransport
import com.microsoft.thrifty.transport.Transport
import io.kotlintest.fail
import io.kotlintest.shouldBe
import kotlinx.coroutines.experimental.async
import kotlinx.coroutines.experimental.awaitAll
import kotlinx.coroutines.experimental.runBlocking
import okio.ByteString
import org.junit.After
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith
import org.junit.runners.Parameterized

/**
 * A test of auto-generated service code for the standard ThriftTest
 * service.
 *
 *
 * Conformance is checked by roundtripping requests to a local server that
 * is run on the official Apache Thrift Java codebase.  The test server has
 * an implementation of ThriftTest methods with semantics as described in the
 * .thrift file itself and in the Apache Thrift git repo, along with Java code
 * generated by their compiler.
 */
@RunWith(Parameterized::class)
class CoroutineConformanceTests(
        private val serverTransport: ServerTransport,
        private val serverProtocol: ServerProtocol
) {
    /**
     * An Apache Thrift server that is started anew for each test.
     *
     * The server's transport and protocols are configured based
     * on values returned by the abstract methods
     * [.getServerProtocol] and [.getServerTransport].
     */
    lateinit var testServer: TestServer

    lateinit var transport: Transport
    lateinit var protocol: Protocol
    lateinit var client: ThriftTestClient

    companion object {
        @Suppress("unused")
        @JvmStatic
        @get:Parameterized.Parameters(name = "{0} - {1}")
        val parameters: Collection<*> = listOf(
                arrayOf(ServerTransport.BLOCKING, ServerProtocol.COMPACT),
                arrayOf(ServerTransport.BLOCKING, ServerProtocol.JSON),
                arrayOf(ServerTransport.BLOCKING, ServerProtocol.BINARY),
                arrayOf(ServerTransport.NON_BLOCKING, ServerProtocol.COMPACT),
                arrayOf(ServerTransport.NON_BLOCKING, ServerProtocol.JSON),
                arrayOf(ServerTransport.NON_BLOCKING, ServerProtocol.BINARY)
        )
    }

    /**
     * When overridden in a derived class, wraps the given transport
     * in a decorator, e.g. a framed transport.
     */
    private fun decorateTransport(transport: Transport): Transport {
        return when (serverTransport) {
            ServerTransport.NON_BLOCKING -> FramedTransport(transport)
            else -> transport
        }
    }

    private fun createProtocol(transport: Transport): Protocol {
        return when (serverProtocol) {
            ServerProtocol.BINARY -> BinaryProtocol(transport)
            ServerProtocol.COMPACT -> CompactProtocol(transport)
            ServerProtocol.JSON ->  JsonProtocol(transport)
        }
    }

    @Before
    fun setup() {
        testServer = TestServer(serverProtocol, serverTransport)
        testServer.run()

        val port = testServer.port()
        val transport = SocketTransport.Builder("localhost", port)
                .readTimeout(2000)
                .build()

        transport.connect()

        this.transport = decorateTransport(transport)
        this.protocol = createProtocol(this.transport)
        this.client = ThriftTestClient(protocol, object : AsyncClientBase.Listener {
            override fun onTransportClosed() {

            }

            override fun onError(error: Throwable) {
                throw AssertionError(error)
            }
        })
    }

    @After fun teardown() {
        client.close()
        protocol.close()
        transport.close()
        testServer.close()
    }

    @Test fun testVoid() = runBlocking {
        client.testVoid() shouldBe Unit
    }

    @Test fun testBool() = runBlocking {
        client.testBool(true) shouldBe true
    }

    @Test fun testByte() = runBlocking {
        client.testByte(200.toByte()) shouldBe 200.toByte()
    }

    @Test fun testI32() = runBlocking {
        client.testI32(404) shouldBe 404
    }

    @Test fun testI64() = runBlocking {
        client.testI64(Long.MAX_VALUE) shouldBe Long.MAX_VALUE
    }

    @Test fun testDouble() = runBlocking {
        client.testDouble(Math.PI) shouldBe Math.PI
    }

    @Test fun testBinary() = runBlocking {
        val binary = ByteString.encodeUtf8("Peace on Earth and Thrift for all mankind")

        client.testBinary(binary) shouldBe binary
    }

    @Test fun testStruct() = runBlocking {
        val xtruct = Xtruct.Builder()
                .byte_thing(1.toByte())
                .i32_thing(2)
                .i64_thing(3L)
                .string_thing("foo")
                .build()

        client.testStruct(xtruct) shouldBe xtruct
    }

    @Test fun testNest() = runBlocking {
        val xtruct = Xtruct.Builder()
                .byte_thing(1.toByte())
                .i32_thing(2)
                .i64_thing(3L)
                .string_thing("foo")
                .build()

        val nest = Xtruct2.Builder()
                .byte_thing(4.toByte())
                .i32_thing(5)
                .struct_thing(xtruct)
                .build()

        client.testNest(nest) shouldBe nest
    }

    @Test fun testMap() = runBlocking {
        val argument = mapOf(1 to 2, 3 to 4, 7 to 8)

        client.testMap(argument) shouldBe argument
    }

    @Test fun testStringMap() = runBlocking {
        val argument = mapOf(
                "foo" to "bar",
                "baz" to "quux",
                "one" to "more"
        )

        client.testStringMap(argument) shouldBe argument
    }

    @Test fun testSet() = runBlocking {
        val set = setOf(1, 2, 3, 4, 5)

        client.testSet(set) shouldBe set
    }

    @Test fun testList() = runBlocking {
        val list = listOf(10, 9, 8, 7, 6, 5, 4, 3, 2, 1)

        client.testList(list) shouldBe list
    }

    @Test fun testEnum() = runBlocking {
        val argument = Numberz.EIGHT

        client.testEnum(argument) shouldBe argument
    }

    @Test fun testTypedef() = runBlocking {
        client.testTypedef(Long.MIN_VALUE) shouldBe Long.MIN_VALUE
    }

    @Test fun testMapMap() = runBlocking {
        client.testMapMap(Integer.MAX_VALUE) shouldBe mapOf(
                -4 to mapOf(
                        -4 to -4,
                        -3 to -3,
                        -2 to -2,
                        -1 to -1
                ),

                4 to mapOf(
                        1 to 1,
                        2 to 2,
                        3 to 3,
                        4 to 4
                )
        )
    }

    @Test fun testInsanity() = runBlocking {
        val empty = Insanity.Builder().build()
        val argument = Insanity.Builder()
                .userMap(mapOf(Numberz.ONE to 10L, Numberz.TWO to 20L, Numberz.THREE to 40L))
                .xtructs(listOf(
                        Xtruct.Builder()
                                .byte_thing(18.toByte())
                                .i32_thing(37)
                                .i64_thing(101L)
                                .string_thing("what")
                                .build()
                ))
                .build()

        val expected = mapOf(
                1L to mapOf(Numberz.TWO to argument, Numberz.THREE to argument),
                2L to mapOf(Numberz.SIX to empty)
        )

        client.testInsanity(argument) shouldBe expected
    }

    @Test fun testMulti() = runBlocking {
        val expected = Xtruct.Builder()
                .string_thing("Hello2")
                .byte_thing(9.toByte())
                .i32_thing(11)
                .i64_thing(13L)
                .build()

        val result = client.testMulti(
                arg0 = 9.toByte(),
                arg1 = 11,
                arg2 = 13L,
                arg3 = mapOf(10.toShort() to "Hello"),
                arg4 = Numberz.THREE,
                arg5 = 5L)

        result shouldBe expected
    }

    @Test fun testExceptionNormalError() = runBlocking {
        try {
            client.testException("Xception")
            fail("Expected an Xception")
        } catch (e: Xception) {
            e.errorCode shouldBe 1001
            e.message_ shouldBe "Xception"
        }
    }

    @Test fun testExceptionInternalError() = runBlocking {
        try {
            client.testException("TException")
            fail("Expected a ThriftException")
        } catch (e: ThriftException) {
            e.kind shouldBe ThriftException.Kind.INTERNAL_ERROR
        }
    }

    @Test fun testMultiExceptionNoError() = runBlocking {
        val (string_thing) = client.testMultiException("Normal", "Hi there")

        // Note: We aren't asserting against an expected value because the members
        //       of the result are unspecified besides 'string_thing', and Thrift
        //       implementations differ on whether to return unset primitive values,
        //       depending on options set during codegen.
        string_thing shouldBe "Hi there"
    }

    @Test fun testMultiExceptionErrorOne() = runBlocking {
        val expected = Xception.Builder()
                .errorCode(1001)
                .message_("This is an Xception")
                .build()

        try {
            client.testMultiException("Xception", "nope")
            fail("Expected an Xception")
        } catch (e: Xception) {
            e shouldBe expected
        }
    }

    @Test fun testMultiExceptionErrorTwo() = runBlocking {
        try {
            client.testMultiException("Xception2", "nope")
            fail("Expected an Xception2")
        } catch (e: Xception2) {
            // Note: We aren't asserting against an expected value because the members
            //       of 'struct_thing' are unspecified besides 'string_thing', and Thrift
            //       implementations differ on whether to return unset primitive values,
            //       depending on options set during codegen.
            e.errorCode shouldBe 2002
            e.struct_thing?.string_thing shouldBe "This is an Xception2"
        }
    }

    @Test fun concurrentAsyncCalls() = runBlocking<Unit> {
        val d1 = async { testBool() }
        val d2 = async { testByte() }
        val d3 = async { testI32() }
        val d4 = async { testI64() }
        val d5 = async { testInsanity() }

        awaitAll(d1, d2, d3, d4, d5)
    }
}

private class DebugProtocolWrapper(protocol: Protocol): DecoratingProtocol(protocol) {
    override fun writeMessageBegin(name: String?, typeId: Byte, seqId: Int) {
        println("writeMessageBegin($name, $typeId, $seqId")
        super.writeMessageBegin(name, typeId, seqId)
    }

    override fun writeMessageEnd() {
        println("writeMessageEnd")
        super.writeMessageEnd()
    }

    override fun writeStructBegin(structName: String?) {
        println("writeStructBegin($structName)")
        super.writeStructBegin(structName)
    }

    override fun writeStructEnd() {
        println("writeStructEnd()")
        super.writeStructEnd()
    }

    override fun writeFieldBegin(fieldName: String?, fieldId: Int, typeId: Byte) {
        println("writeFieldBegin($fieldName, $fieldId, $typeId)")
        super.writeFieldBegin(fieldName, fieldId, typeId)
    }

    override fun writeFieldEnd() {
        println("writeFieldEnd()")
        super.writeFieldEnd()
    }

    override fun writeFieldStop() {
        println("writeFieldStop()")
        super.writeFieldStop()
    }

    override fun writeMapBegin(keyTypeId: Byte, valueTypeId: Byte, mapSize: Int) {
        println("writeMapBegin($keyTypeId, $valueTypeId, $mapSize)")
        super.writeMapBegin(keyTypeId, valueTypeId, mapSize)
    }

    override fun writeMapEnd() {
        println("writeMapEnd()")
        super.writeMapEnd()
    }

    override fun writeListBegin(elementTypeId: Byte, listSize: Int) {
        println("writeListBegin($elementTypeId, $listSize)")
        super.writeListBegin(elementTypeId, listSize)
    }

    override fun writeListEnd() {
        println("writeListEnd()")
        super.writeListEnd()
    }

    override fun writeSetBegin(elementTypeId: Byte, setSize: Int) {
        println("writeSetBegin($elementTypeId, $setSize)")
        super.writeSetBegin(elementTypeId, setSize)
    }

    override fun writeSetEnd() {
        println("writeSetEnd()")
        super.writeSetEnd()
    }

    override fun writeBool(b: Boolean) {
        println("writeBool($b)")
        super.writeBool(b)
    }

    override fun writeByte(b: Byte) {
        println("writeByte($b)")
        super.writeByte(b)
    }

    override fun writeI16(i16: Short) {
        println("writeI16($i16)")
        super.writeI16(i16)
    }

    override fun writeI32(i32: Int) {
        println("writeI32($i32)")
        super.writeI32(i32)
    }

    override fun writeI64(i64: Long) {
        println("writeI64($i64)")
        super.writeI64(i64)
    }

    override fun writeDouble(dub: Double) {
        println("writeDouble($dub)")
        super.writeDouble(dub)
    }

    override fun writeString(str: String?) {
        println("writeString($str)")
        super.writeString(str)
    }

    override fun writeBinary(buf: ByteString?) {
        println("writeBinary(${buf?.hex()})")
        super.writeBinary(buf)
    }

    override fun readMessageBegin(): MessageMetadata {
        println("readMessageBegin()")
        return super.readMessageBegin()
    }

    override fun readMessageEnd() {
        println("readMessageEnd()")
        super.readMessageEnd()
    }

    override fun readStructBegin(): StructMetadata {
        println("readStructBegin()")
        return super.readStructBegin()
    }

    override fun readStructEnd() {
        println("readStructEnd()")
        super.readStructEnd()
    }

    override fun readFieldBegin(): FieldMetadata {
        println("readFieldBegin()")
        return super.readFieldBegin()
    }

    override fun readFieldEnd() {
        println("readFieldEnd()")
        super.readFieldEnd()
    }

    override fun readMapBegin(): MapMetadata {
        println("readMapBegin()")
        return super.readMapBegin()
    }

    override fun readMapEnd() {
        println("readMapEnd()")
        super.readMapEnd()
    }

    override fun readListBegin(): ListMetadata {
        println("readListBegin()")
        return super.readListBegin()
    }

    override fun readListEnd() {
        println("readListEnd()")
        super.readListEnd()
    }

    override fun readSetBegin(): SetMetadata {
        println("readSetBegin()")
        return super.readSetBegin()
    }

    override fun readSetEnd() {
        println("readSetEnd()")
        super.readSetEnd()
    }

    override fun readBool(): Boolean {
        println("readBool()")
        return super.readBool()
    }

    override fun readByte(): Byte {
        println("readByte()")
        return super.readByte()
    }

    override fun readI16(): Short {
        println("readI16()")
        return super.readI16()
    }

    override fun readI32(): Int {
        println("readI32()")
        return super.readI32()
    }

    override fun readI64(): Long {
        println("readI64()")
        return super.readI64()
    }

    override fun readDouble(): Double {
        println("readDouble()")
        return super.readDouble()
    }

    override fun readString(): String {
        println("readString()")
        return super.readString()
    }

    override fun readBinary(): ByteString {
        println("readBinary()")
        return super.readBinary()
    }
}