/*
 * Thrifty
 *
 * Copyright (c) Microsoft Corporation
 *
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * THIS CODE IS PROVIDED ON AN  *AS IS* BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING
 * WITHOUT LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE,
 * FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
 *
 * See the Apache Version 2.0 License for specific language governing permissions and limitations under the License.
 */

import org.gradle.api.attributes.java.TargetJvmVersion
import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.plugin.KotlinPlatformType
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'thrifty-mpp-module'
    id 'thrifty-publish-module'
}

description = 'Provides a minimal Thrift runtime to support classes generated by Thrifty'

tasks.withType(KotlinCompile).configureEach {
    compilerOptions {
        jvmTarget = JvmTarget.JVM_1_8
        freeCompilerArgs = ['-Xjvm-default=all']
    }
}

kotlin {
    jvm()

    iosArm64 {
        binaries {
            framework {
                baseName = "Thrifty"
            }
        }

        compilations.main.cinterops {
            KT62102Workaround {}
        }
    }

    iosX64 {
        binaries {
            framework {
                baseName = "Thrifty"
            }
        }

        compilations.main.cinterops {
            KT62102Workaround {}
        }
    }

    sourceSets {
        all {
            languageSettings {
                optIn("kotlin.ExperimentalMultiplatform")
            }
        }

        commonMain {
            dependencies {
                api libs.kotlin.stdlibCommon
                api libs.okio
                api libs.kotlinx.coroutines
            }
        }

        commonTest {
            dependencies {
                implementation libs.kotlin.test.common
                implementation libs.kotlin.test.annotations.common
                implementation libs.kotest.assertions.common
                implementation libs.kotest.assertions.core
            }
        }

        jvmMain {
        }

        jvmTest {
            dependencies {
                implementation libs.kotlin.test.junit5
                implementation libs.kotest.assertions.coreJvm
                implementation libs.junit
            }
        }

        iosMain {
            dependsOn commonMain
        }

        iosTest {
            dependsOn commonTest

            dependencies {
                implementation libs.kotlin.test.common
                implementation libs.kotest.assertions.common
                implementation libs.kotest.assertions.core
            }
        }

        iosArm64Main {
            dependsOn iosMain
        }

        iosArm64Test {
            dependsOn iosTest
        }

        iosX64Main {
            dependsOn iosMain
        }

        iosX64Test {
            dependsOn iosTest
        }
    }
}

jvmTest {
    useJUnitPlatform()
}

tasks.register("iosTest") {
    def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 15 Pro Max"
    dependsOn 'linkDebugTestIosX64'
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Runs tests for target 'ios' on an iOS simulator"

    doLast {
        def binary = kotlin.targets.iosX64.binaries.getTest('DEBUG').outputFile
        println("muh binary: ${binary.absolutePath}")
        exec {
            commandLine 'xcrun', 'simctl', 'spawn', device, binary.absolutePath
        }
    }
}

// What have I gotten myself in to
configurations {
    jvmApiElements {
        attributes {
            attribute(KotlinPlatformType.attribute, KotlinPlatformType.jvm)
            attribute(TargetJvmVersion.TARGET_JVM_VERSION_ATTRIBUTE, 8)
            attribute(Bundling.BUNDLING_ATTRIBUTE, project.objects.named(Bundling, "external"))
        }
    }

    jvmRuntimeElements {
        attributes {
            attribute(KotlinPlatformType.attribute, KotlinPlatformType.jvm)
            attribute(TargetJvmVersion.TARGET_JVM_VERSION_ATTRIBUTE, 8)
            attribute(Bundling.BUNDLING_ATTRIBUTE, project.objects.named(Bundling, "external"))
        }
    }
}
