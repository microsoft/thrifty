/*
 * Thrifty
 *
 * Copyright (c) Microsoft Corporation
 *
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * THIS CODE IS PROVIDED ON AN  *AS IS* BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING
 * WITHOUT LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE,
 * FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
 *
 * See the Apache Version 2.0 License for specific language governing permissions and limitations under the License.
 */

import org.gradle.api.attributes.java.TargetJvmVersion
import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.plugin.KotlinPlatformType
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'thrifty-mpp-module'
    id 'thrifty-publish-module'
}

description = 'Provides a minimal Thrift runtime to support classes generated by Thrifty'

tasks.withType(KotlinCompile).configureEach {
    compilerOptions {
        jvmTarget = JvmTarget.JVM_1_8
        freeCompilerArgs = ['-Xjvm-default=all']
    }
}

def compileTestThrift = tasks.register("compileTestThrift", JavaExec) { t ->
    t.inputs.file("$projectDir/ClientThriftTest.thrift")
    t.outputs.dir("$projectDir/build/generated-src/thrifty-kotlin/kotlin")

    t.outputs.cacheIf("This task is always cacheable based on its inputs") { true }

    t.classpath = project(":thrifty-compiler").sourceSets.main.runtimeClasspath

    mainClass = "com.microsoft.thrifty.compiler.ThriftyCompiler"

    args = [
            "--out=$projectDir/build/generated-src/thrifty-kotlin/kotlin",
            "--kt-struct-builders",
            "--service-type=coroutine",
            "$projectDir/ClientThriftTest.thrift"
    ]
}

kotlin {
    jvm()

    iosArm64 {
        binaries {
            framework {
                baseName = "Thrifty"
            }
        }

        compilations.main.cinterops {
            KT62102Workaround {}
        }

        compilations.test.compileTaskProvider.configure {
            dependsOn compileTestThrift
        }
    }

    iosX64 {
        binaries {
            framework {
                baseName = "Thrifty"
            }
        }

        compilations.main.cinterops {
            KT62102Workaround {}
        }

        compilations.test.compileTaskProvider.configure {
            dependsOn compileTestThrift
        }
    }

    iosSimulatorArm64 {
        binaries {
            framework {
                baseName = "Thrifty"
            }
        }

        compilations.main.cinterops {
            KT62102Workaround {}
        }

        compilations.test.compileTaskProvider.configure {
            dependsOn compileTestThrift
        }
    }

    sourceSets {
        all {
            languageSettings {
                optIn("kotlin.ExperimentalMultiplatform")
            }
        }

        commonMain {
            dependencies {
                api libs.kotlin.stdlibCommon
                api libs.okio
                api libs.kotlinx.coroutines
            }
        }

        commonTest {
            dependencies {
                implementation libs.kotlin.test.common
                implementation libs.kotlin.test.annotations.common
                implementation libs.kotest.assertions.common
                implementation libs.kotest.assertions.core
            }
        }

        jvmMain {
        }

        jvmTest {
            dependencies {
                implementation libs.kotlin.test.junit5
                implementation libs.kotest.assertions.coreJvm
                implementation libs.junit
            }
        }

        iosMain {
            dependsOn commonMain
        }

        iosTest {
            dependsOn commonTest

            kotlin.srcDir("$buildDir/generated-src/thrifty-kotlin/kotlin")

            dependencies {
                implementation libs.kotlin.test.common
                implementation libs.kotest.assertions.common
                implementation libs.kotest.assertions.core
            }
        }

        iosArm64Main {
            dependsOn iosMain
        }

        iosArm64Test {
            dependsOn iosTest
        }

        iosX64Main {
            dependsOn iosMain
        }

        iosX64Test {
            dependsOn iosTest
        }

        iosSimulatorArm64Main {
            dependsOn iosMain
        }
            
        iosSimulatorArm64Test {
            dependsOn iosTest
        }
    }
}

jvmTest {
    useJUnitPlatform()
}

abstract class IosTestTask extends DefaultTask {
    @InputFiles
    abstract Property<FileCollection> getServerClasspath()

    @InputFile
    abstract RegularFileProperty getTestBinary()

    @Input
    abstract Property<String> getDevice()

    private Process serverProcess

    private int port

    @TaskAction
    def run() {
        try {
            serverProcess = startServer()
            logger.quiet("Server listening on $port")
            runTests()
        } finally {
            serverProcess?.destroyForcibly()
        }
    }

    private void runTests() {
        def thePort = port
        project.exec {
            environment("SIMCTL_CHILD_THRIFTY_HTTP_SERVER_PORT", thePort.toString())
            commandLine 'xcrun', 'simctl', 'spawn', device.get(), testBinary.get().getAsFile().absolutePath
        }
    }

    private Process startServer() {
        Process process = new ProcessBuilder()
            .command(["java", "-cp", serverClasspath.get().getAsPath(), "com.microsoft.thrifty.mains.HttpServerMain"])
            .start()

        def reader = new InputStreamReader(process.getInputStream())

        while (true) {
            String portLine = reader.readLine()
            if (portLine == null) {
                throw new RuntimeException("Server failed to start")
            }

            if (portLine.startsWith("port ")) {
                port = Integer.parseInt(portLine.substring(5))
                break
            }
        }

        return process
    }
}

tasks.register("iosTest", IosTestTask) {
    dependsOn 'linkDebugTestIosX64'

    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Runs tests for target 'ios' on an iOS simulator"

    device = project.findProperty("iosDevice")?.toString() ?: "iPhone 15 Pro Max"
    testBinary = kotlin.targets.iosX64.binaries.getTest('DEBUG').outputFile
    serverClasspath = project(":thrifty-test-server").sourceSets.main.runtimeClasspath
}

// What have I gotten myself in to
configurations {
    jvmApiElements {
        attributes {
            attribute(KotlinPlatformType.attribute, KotlinPlatformType.jvm)
            attribute(TargetJvmVersion.TARGET_JVM_VERSION_ATTRIBUTE, 8)
            attribute(Bundling.BUNDLING_ATTRIBUTE, project.objects.named(Bundling, "external"))
        }
    }

    jvmRuntimeElements {
        attributes {
            attribute(KotlinPlatformType.attribute, KotlinPlatformType.jvm)
            attribute(TargetJvmVersion.TARGET_JVM_VERSION_ATTRIBUTE, 8)
            attribute(Bundling.BUNDLING_ATTRIBUTE, project.objects.named(Bundling, "external"))
        }
    }
}
