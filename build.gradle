/*
 * Thrifty
 *
 * Copyright (c) Microsoft Corporation
 *
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * THIS CODE IS PROVIDED ON AN  *AS IS* BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING
 * WITHOUT LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE,
 * FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
 *
 * See the Apache Version 2.0 License for specific language governing permissions and limitations under the License.
 */

allprojects {
    repositories {
        mavenCentral()
    }

    group GROUP
    version VERSION

    project.ext {
        libraries = [
                guava: [
                        'com.google.guava:guava:21.0'
                ],

                okio: [
                        'com.squareup.okio:okio:1.11.0'
                ],

                javaPoet: [
                        'com.squareup:javapoet:1.8.0'
                ],

                testing: [
                        'junit:junit:4.12',
                        'org.mockito:mockito-core:1.10.19',
                        'com.google.truth:truth:0.28',
                        'org.hamcrest:hamcrest-all:1.3'
                ]
        ]
    }
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
}

subprojects { sp ->
    apply plugin: 'java-library'
    apply plugin: 'idea'
    apply plugin: 'checkstyle'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    checkstyle {
        configFile = rootProject.file("config/checkstyle/checkstyle.xml")
        configProperties = ["checkstyle.cache.file": file('build/checkstyle.cache')]
        showViolations = true
        sourceSets = [sourceSets.main]
    }

    tasks.withType(Checkstyle) {
        exclude '**/antlr/**'
    }

    tasks.withType(JavaCompile) {
        options.fork = true
        options.incremental = true
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        from 'build/docs/javadoc'
        classifier = 'javadoc'
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }

    artifacts {
        archives jar
        archives javadocJar
        archives sourcesJar
    }

    test {
        testLogging {
            events "failed"
            exceptionFormat "full"
            showStackTraces true
            showExceptions true
            showCauses true
        }
    }
}

afterEvaluate {
    subprojects {
        apply from: file("${rootDir}/gradle/gradle-mvn-push.gradle")
    }
}
